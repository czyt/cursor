package parser

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"testing"
)

func TestParser(t *testing.T) {
	code := []byte(`data: "<|BEGIN_type|>"
data: "\n"
data: "continue"
data: "\n"
data: "<|END_type|>"
data: "\n"
data: "<|BEGIN_message|>"
data: "package"
data: " main"
data: "\n\n"
data: "import"
data: " (\n"
data: "\t"
data: "\"fmt"
data: "\"\n"
data: "\t"
data: "\"sync"
data: "\"\n"
data: ")\n\n"
data: "func"
data: " main"
data: "()"
data: " {\n"
data: "\tvar"
data: " wg"
data: " sync"
data: ".Wait"
data: "Group"
data: "\n"
data: "\tfor"
data: " i"
data: " :="
data: " "
data: "0"
data: ";"
data: " i"
data: " < "
data: "5"
data: ";"
data: " i"
data: "++"
data: " {\n"
data: "\t"
data: "\twg"
data: ".Add"
data: "("
data: "1"
data: ")\n"
data: "\t"
data: "\tgo"
data: " func"
data: "(num"
data: " int"
data: ")"
data: " {\n"
data: "\t\t"
data: "\tdefer"
data: " wg"
data: ".Done"
data: "()\n"
data: "\t\t"
data: "\tfmt"
data: ".Printf"
data: "(\""
data: "G"
data: "or"
data: "outine"
data: " %"
data: "d"
data: "\\n"
data: "\","
data: " num"
data: ")\n"
data: "\t"
data: "\t"
data: "}("
data: "i"
data: ")\n"
data: "\t"
data: "}\n"
data: "\twg"
data: ".Wait"
data: "()\n"
data: "\tfmt"
data: ".Println"
data: "(\""
data: "All"
data: " gor"
data: "outines"
data: " finished"
data: " executing\")\n}\n"
data: "<|END_message|>"
data: [DONE]`)
	reader := bytes.NewBuffer(code)
	parse, _ := Parse(reader)
	fmt.Println(string(parse))
}

func TestParse2(t *testing.T) {
	payload := "ZGF0YTogIjx8QkVHSU5fdHlwZXw+Ig0KZGF0YTogIlxuIg0KZGF0YTogIm1hcmtkb3duIg0KZGF0YTogIlxuIg0KZGF0YTogIjx8RU5EX3R5cGV8PiINCmRhdGE6ICJcbiINCmRhdGE6ICI8fEJFR0lOX21lc3NhZ2V8PiINCmRhdGE6ICJcbiINCmRhdGE6ICJcdThmZDkiDQpkYXRhOiAiXHU0ZTJhIg0KZGF0YTogIlx1N2EwYlx1NWU4ZiINCmRhdGE6ICJcdTY2MmYiDQpkYXRhOiAiXHU0ZTAwXHU0ZTJhIg0KZGF0YTogIlx1NmI3YiINCmRhdGE6ICJcdTk1MDEiDQpkYXRhOiAiXHU3YTBiXHU1ZThmIg0KZGF0YTogIlx1ZmYwYyINCmRhdGE6ICJcdTViODMiDQpkYXRhOiAiXHU3Njg0Ig0KZGF0YTogIlx1NzZlZSINCmRhdGE6ICJcdTc2ODQiDQpkYXRhOiAiXHU2NjJmIg0KZGF0YTogIlx1NGUzYSINCmRhdGE6ICJcdTRlODYiDQpkYXRhOiAiXHU2ZjE0Ig0KZGF0YTogIlx1NzkzYSINCmRhdGE6ICJcdTZiN2IiDQpkYXRhOiAiXHU5NTAxIg0KZGF0YTogIlx1MzAwMiINCmRhdGE6ICJcdTU3MjgiDQpkYXRhOiAiXHU4ZmQ5Ig0KZGF0YTogIlx1NGUyYSINCmRhdGE6ICJcdTdhMGJcdTVlOGYiDQpkYXRhOiAiXHU0ZTJkIg0KZGF0YTogIlx1ZmYwYyINCmRhdGE6ICJcdTYyMTFcdTRlZWMiDQpkYXRhOiAiXHU1MjFiXHU1ZWZhIg0KZGF0YTogIlx1NGU4NiINCmRhdGE6ICJcdTRlMDBcdTRlMmEiDQpkYXRhOiAiXHU5MDFhIg0KZGF0YTogIlx1OTA1MyINCmRhdGE6ICJDIg0KZGF0YTogIlx1ZmYwYyINCmRhdGE6ICJcdTViODMiDQpkYXRhOiAiXHU3Njg0Ig0KZGF0YTogIlx1N2M3Ylx1NTc4YiINCmRhdGE6ICJcdTY2MmYiDQpkYXRhOiAiY2hhbiINCmRhdGE6ICIgQyINCmRhdGE6ICJcdTMwMDIiDQpkYXRhOiAiXHU2MjExXHU0ZWVjIg0KZGF0YTogIlx1NWMwNiINCmRhdGE6ICJcdTkwMWEiDQpkYXRhOiAiXHU5MDUzIg0KZGF0YTogIkMiDQpkYXRhOiAiXHU3Njg0Ig0KZGF0YTogIlx1NGUwMFx1NGUyYSINCmRhdGE6ICJcdTUyNmYiDQpkYXRhOiAiXHU2NzJjIg0KZGF0YTogIlx1NTNkMVx1OTAwMSINCmRhdGE6ICJcdTUyMzAiDQpkYXRhOiAiXHU5MDFhIg0KZGF0YTogIlx1OTA1MyINCmRhdGE6ICJDIg0KZGF0YTogIlx1NGUyZCINCmRhdGE6ICJcdWZmMGMiDQpkYXRhOiAiXHU4ZmQ5Ig0KZGF0YTogIlx1NjgzNyINCmRhdGE6ICJcdTkwMWEiDQpkYXRhOiAiXHU5MDUzIg0KZGF0YTogIkMiDQpkYXRhOiAiXHU1YzMxIg0KZGF0YTogIlx1ODhhYiINCmRhdGE6ICJcdTk2M2IiDQpkYXRhOiAiXHU1ODVlIg0KZGF0YTogIlx1NGU4NiINCmRhdGE6ICJcdWZmMGMiDQpkYXRhOiAiXHU1NmUwIg0KZGF0YTogIlx1NGUzYSINCmRhdGE6ICJcdTViODMiDQpkYXRhOiAiXHU5NzAwXHU4OTgxIg0KZGF0YTogIlx1N2I0OSINCmRhdGE6ICJcdTVmODUiDQpkYXRhOiAiXHU4MWVhIg0KZGF0YTogIlx1NWRmMSINCmRhdGE6ICJcdTc2ODQiDQpkYXRhOiAiXHU1MDNjIg0KZGF0YTogIlx1ODhhYiINCmRhdGE6ICJcdThiZmIiDQpkYXRhOiAiXHU1M2Q2Ig0KZGF0YTogIlx1MzAwMiINCmRhdGE6ICJcdThmZDkiDQpkYXRhOiAiXHU1YzMxIg0KZGF0YTogIlx1NjYyZiINCmRhdGE6ICJcdTZiN2IiDQpkYXRhOiAiXHU5NTAxIg0KZGF0YTogIlx1MzAwMlxuXG4iDQpkYXRhOiAiXHU1OTgyXHU2NzljIg0KZGF0YTogIlx1NGY2MCINCmRhdGE6ICJcdTYwZjMiDQpkYXRhOiAiXHU4OTgxIg0KZGF0YTogIlx1NGYxOCINCmRhdGE6ICJcdTUzMTYiDQpkYXRhOiAiXHU4ZmQ5Ig0KZGF0YTogIlx1NGUyYSINCmRhdGE6ICJcdTdhMGJcdTVlOGYiDQpkYXRhOiAiXHVmZjBjIg0KZGF0YTogIlx1NGY2MCINCmRhdGE6ICJcdTk3MDBcdTg5ODEiDQpkYXRhOiAiXHU5MDdmIg0KZGF0YTogIlx1NTE0ZCINCmRhdGE6ICJcdTZiN2IiDQpkYXRhOiAiXHU5NTAxIg0KZGF0YTogIlx1MzAwMiINCmRhdGE6ICJcdTRmNjAiDQpkYXRhOiAiXHU1M2VmXHU0ZWU1Ig0KZGF0YTogIlx1NGY3Zlx1NzUyOCINCmRhdGE6ICJcdTVlMjYiDQpkYXRhOiAiXHU3ZjEzIg0KZGF0YTogIlx1NTFiMiINCmRhdGE6ICJcdTc2ODQiDQpkYXRhOiAiXHU5MDFhIg0KZGF0YTogIlx1OTA1MyINCmRhdGE6ICJcdWZmMGMiDQpkYXRhOiAiXHU2MjE2Ig0KZGF0YTogIlx1ODAwNSINCmRhdGE6ICJcdTRmN2ZcdTc1MjgiDQpkYXRhOiAiXHU0ZTkyIg0KZGF0YTogIlx1NjVhNSINCmRhdGE6ICJcdTk1MDEiDQpkYXRhOiAiXHU2NzY1Ig0KZGF0YTogIlx1OTA3ZiINCmRhdGE6ICJcdTUxNGQiDQpkYXRhOiAiXHU2YjdiIg0KZGF0YTogIlx1OTUwMSINCmRhdGE6ICJcdTMwMDIiDQpkYXRhOiAiXHU0ZTBiIg0KZGF0YTogIlx1OTc2MiINCmRhdGE6ICJcdTY2MmYiDQpkYXRhOiAiXHU0ZjdmXHU3NTI4Ig0KZGF0YTogIlx1NGU5MiINCmRhdGE6ICJcdTY1YTUiDQpkYXRhOiAiXHU5NTAxIg0KZGF0YTogIlx1NzY4NCINCmRhdGE6ICJcdTc5M2EiDQpkYXRhOiAiXHU0ZjhiIg0KZGF0YTogIlx1NGVlM1x1NzgwMSINCmRhdGE6ICJcdWZmMWFcblxuIg0KZGF0YTogImBgYCINCmRhdGE6ICJDIg0KZGF0YTogIjpcXCINCmRhdGE6ICJVc2VycyINCmRhdGE6ICJcXCINCmRhdGE6ICJjenkiDQpkYXRhOiAidCINCmRhdGE6ICJcXCINCmRhdGE6ICJjdXJzb3IiDQpkYXRhOiAiLXQiDQpkYXRhOiAidXRvciINCmRhdGE6ICJcXCINCmRhdGE6ICJnIg0KZGF0YTogIm9waGVyIg0KZGF0YTogIi5nbyINCmRhdGE6ICJcbiINCmRhdGE6ICJwYWNrYWdlIg0KZGF0YTogIiBtYWluIg0KZGF0YTogIlxuXG4iDQpkYXRhOiAiaW1wb3J0Ig0KZGF0YTogIiAoXG4iDQpkYXRhOiAiICAgIg0KZGF0YTogIiBcIiINCmRhdGE6ICJmbXQiDQpkYXRhOiAiXCJcbiINCmRhdGE6ICIgICAiDQpkYXRhOiAiIFwiIg0KZGF0YTogInN5bmMiDQpkYXRhOiAiXCJcbiINCmRhdGE6ICIpXG5cbiINCmRhdGE6ICJ0eXBlIg0KZGF0YTogIiBDIg0KZGF0YTogIiBjaGFuIg0KZGF0YTogIiBpbnQiDQpkYXRhOiAiXG5cbiINCmRhdGE6ICJmdW5jIg0KZGF0YTogIiBtYWluIg0KZGF0YTogIigpIg0KZGF0YTogIiB7XG4iDQpkYXRhOiAiICAgIg0KZGF0YTogIiB2YXIiDQpkYXRhOiAiIGMiDQpkYXRhOiAiID0iDQpkYXRhOiAiIG1ha2UiDQpkYXRhOiAiKEMiDQpkYXRhOiAiLCINCmRhdGE6ICIgIg0KZGF0YTogIjEiDQpkYXRhOiAiKVxuIg0KZGF0YTogIiAgICINCmRhdGE6ICIgdmFyIg0KZGF0YTogIiBtdSINCmRhdGE6ICIgc3luYyINCmRhdGE6ICIuTXV0ZXgiDQpkYXRhOiAiXG4iDQpkYXRhOiAiICAgIg0KZGF0YTogIiBtdSINCmRhdGE6ICIuTG9jayINCmRhdGE6ICIoKVxuIg0KZGF0YTogIiAgICINCmRhdGE6ICIgZ28iDQpkYXRhOiAiIGZ1bmMiDQpkYXRhOiAiKCkiDQpkYXRhOiAiIHtcbiINCmRhdGE6ICIgICAgICAgIg0KZGF0YTogIiBjIg0KZGF0YTogIiA8LSINCmRhdGE6ICIgIg0KZGF0YTogIjEiDQpkYXRhOiAiXG4iDQpkYXRhOiAiICAgICAgICINCmRhdGE6ICIgbXUiDQpkYXRhOiAiLlVubG9jayINCmRhdGE6ICIoKVxuIg0KZGF0YTogIiAgICINCmRhdGE6ICIgfSgpXG4iDQpkYXRhOiAiICAgIg0KZGF0YTogIiBtdSINCmRhdGE6ICIuTG9jayINCmRhdGE6ICIoKVxuIg0KZGF0YTogIiAgICINCmRhdGE6ICIgZm10Ig0KZGF0YTogIi5QcmludGxuIg0KZGF0YTogIig8LSINCmRhdGE6ICJjIg0KZGF0YTogIilcbiINCmRhdGE6ICJ9XG4iDQpkYXRhOiAiYGAiDQpkYXRhOiAiYFxuXG4iDQpkYXRhOiAiXHU1NzI4Ig0KZGF0YTogIlx1OGZkOSINCmRhdGE6ICJcdTRlMmEiDQpkYXRhOiAiXHU3OTNhIg0KZGF0YTogIlx1NGY4YiINCmRhdGE6ICJcdTRlZTNcdTc4MDEiDQpkYXRhOiAiXHU0ZTJkIg0KZGF0YTogIlx1ZmYwYyINCmRhdGE6ICJcdTYyMTFcdTRlZWMiDQpkYXRhOiAiXHU0ZjdmXHU3NTI4Ig0KZGF0YTogIlx1NGU4NiINCmRhdGE6ICJcdTRlOTIiDQpkYXRhOiAiXHU2NWE1Ig0KZGF0YTogIlx1OTUwMSINCmRhdGE6ICJcdTY3NjUiDQpkYXRhOiAiXHU5MDdmIg0KZGF0YTogIlx1NTE0ZCINCmRhdGE6ICJcdTZiN2IiDQpkYXRhOiAiXHU5NTAxIg0KZGF0YTogIlx1MzAwMiINCmRhdGE6ICJcdTYyMTFcdTRlZWMiDQpkYXRhOiAiXHU5OTk2Ig0KZGF0YTogIlx1NTE0OCINCmRhdGE6ICJcdTUyMWJcdTVlZmEiDQpkYXRhOiAiXHU0ZTg2Ig0KZGF0YTogIlx1NGUwMFx1NGUyYSINCmRhdGE6ICJcdTRlOTIiDQpkYXRhOiAiXHU2NWE1Ig0KZGF0YTogIlx1OTUwMSINCmRhdGE6ICJtdSINCmRhdGE6ICJcdWZmMGMiDQpkYXRhOiAiXHU3MTM2Ig0KZGF0YTogIlx1NTQwZSINCmRhdGE6ICJcdTU3MjgiDQpkYXRhOiAiXHU1M2QxXHU5MDAxIg0KZGF0YTogIlx1OTAxYSINCmRhdGE6ICJcdTkwNTMiDQpkYXRhOiAiQyINCmRhdGE6ICJcdTc2ODQiDQpkYXRhOiAiXHU1MDNjIg0KZGF0YTogIlx1NGU0YiINCmRhdGE6ICJcdTUyNGQiDQpkYXRhOiAiXHVmZjBjIg0KZGF0YTogIlx1NjIxMVx1NGVlYyINCmRhdGE6ICJcdTk1MDEiDQpkYXRhOiAiXHU1YjlhIg0KZGF0YTogIlx1NGU4NiINCmRhdGE6ICJcdTRlOTIiDQpkYXRhOiAiXHU2NWE1Ig0KZGF0YTogIlx1OTUwMSINCmRhdGE6ICJcdTMwMDIiDQpkYXRhOiAiXHU1NzI4Ig0KZGF0YTogIlx1NjNhNSINCmRhdGE6ICJcdTY1MzYiDQpkYXRhOiAiXHU5MDFhIg0KZGF0YTogIlx1OTA1MyINCmRhdGE6ICJDIg0KZGF0YTogIlx1NzY4NCINCmRhdGE6ICJcdTUwM2MiDQpkYXRhOiAiXHU0ZTRiIg0KZGF0YTogIlx1NTI0ZCINCmRhdGE6ICJcdWZmMGMiDQpkYXRhOiAiXHU2MjExXHU0ZWVjIg0KZGF0YTogIlx1NTE4ZCINCmRhdGE6ICJcdTZiMjEiDQpkYXRhOiAiXHU5NTAxIg0KZGF0YTogIlx1NWI5YSINCmRhdGE6ICJcdTRlOTIiDQpkYXRhOiAiXHU2NWE1Ig0KZGF0YTogIlx1OTUwMSINCmRhdGE6ICJcdTMwMDIiDQpkYXRhOiAiXHU4ZmQ5Ig0KZGF0YTogIlx1NjgzNyINCmRhdGE6ICJcdTVjMzEiDQpkYXRhOiAiXHU1M2VmXHU0ZWU1Ig0KZGF0YTogIlx1OTA3ZiINCmRhdGE6ICJcdTUxNGQiDQpkYXRhOiAiXHU2YjdiIg0KZGF0YTogIlx1OTUwMVx1NGU4Nlx1MzAwMiINCmRhdGE6ICIiDQpkYXRhOiAiPHxFTkRfbWVzc2FnZXw+Ig0KZGF0YTogW0RPTkVd"
	decodeString, err := base64.StdEncoding.DecodeString(payload)
	if err != nil {
		t.Fatal(err)
	}
	buffer := bytes.NewBuffer(decodeString)
	parsePayload, _ := Parse(buffer)
	fmt.Println(string(parsePayload))
}
